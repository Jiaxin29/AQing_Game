// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        size: {value: [200.0, 200.0], editor: {tooltip: '节点尺寸'}}
        radius: {value: 1.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  #define pi 3.141592653589793
  #define e 2.718281828459045

  uniform Properties {
    vec2 size;
    float radius;
  };

  const float MAXLEN = 100.0;

  float getWeight(float x, float y) {
    // return (1.0 / (2.0 * pi * pow(radius, 2.0))) * pow(1.0 / e, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(radius, 2.0)));
    return pow(1.0 / e, (pow(x, 2.0) + pow(y, 2.0)) / (2.0 * pow(radius, 2.0)));  // 因为会归一化，所以前面的系数可以舍去
  }

  // 获取模糊颜色
  vec4 getBlurColor (vec2 pos) {
    // float sum = 0.0; // 总权重

    // // 中心
    // sum += getWeight(0.0, 0.0);

    // // X轴
    // for(float x = 1.0; x <= MAXLEN; x++) {
    //     if (x > radius) break;
    //     sum += getWeight(x, 0.0) * 2.0;
    // } 

    // // Y轴
    // for(float y = 1.0; y <= MAXLEN; y++) {
    //   if (y > radius) break;
    //     sum += getWeight(0.0, y) * 2.0;
    // } 

    // // 第一象限的权重 * 4.0 就是4个象限的权重
    // for(float x = 1.0; x <= MAXLEN; x++) {
    //   for (float y = 1.0; y<= MAXLEN; y++) {
    //     if ((x > radius) || (y > radius)) break;
    //     sum += getWeight(x, y) * 4.0;
    //   }
    // }

    // // 计算卷积
    // vec4 color = vec4(0); // 初始颜色
    // for (float i = 0.0; i <= MAXLEN; i++) { // 水平方向
    //   for (float j = 0.0; j <= MAXLEN; j++) { // 垂直方向
    //     if ((i > radius * 2.0) || (j > radius * 2.0)) {
    //       break;
    //     }

    //     float r = i - radius;
    //     float c = j - radius;
    //     color += texture2D(texture, pos + vec2(r / size.x, c / size.y)) * (getWeight(r, c)); // 累加颜色
    //   }
    // }

    vec4 color = vec4(0); // 初始颜色
    float sum = 0.0; // 总权重
    // float halfSize = floor(radius * 6.0 + 1.0) / 2.0;

    // 卷积过程
    for (float i = 0.0; i <= MAXLEN; i++) { // 水平方向
      float r = i - radius;
      if (r > radius) {
        break;
      }

      for (float j = 0.0; j <= MAXLEN; j++) { // 垂直方向
        float c = j - radius;
        if (c > radius) {
          break;
        }

        vec2 target = pos + vec2(r / size.x, c / size.y); // 目标像素位置
        float weight = getWeight(r, c);
        color += texture2D(texture, target) * weight; // 累加颜色
        sum += weight; // 累加权重
      }
    }

    // 后续优化
    // 因为权重矩阵是一次性计算即可不断应用，因此可以将权重矩阵的计算放到CPU计算，并传入到Shader直接渲染，因此有以下优化方案
    // v3：原始权重矩阵在CPU计算并传入到Shader
    // v4：加权平均后的权重矩阵在CPU计算并传入Shader

    color /= sum; // 求出平均值
    return color;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
    ALPHA_TEST(o);

    vec4 color = getBlurColor(v_uv0);
    color.a = v_color.a;
    gl_FragColor = color;
  }
}%
